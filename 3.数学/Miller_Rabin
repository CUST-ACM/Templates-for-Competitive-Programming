namespace Miller_Rabin{
    ll mul(ll a, ll b, ll p){
        return (a * b - (ll)((long double)a / p * b) * p + p) % p;
    }
    ll pow(ll a,ll b,ll p){
        ll ans = 1;
        while(b){
            if(b & 1)ans = mul(ans, a, p);//a和b可能很大
            b >>= 1;
            a = mul(a,a,p);
        }
        return ans;
    }
    bool miller_rabin(ll n){
        if(n == 2)return 1;
        if(n < 2 || !(n & 1))return 0;
        ll u,t;
        for(t = 0,u = n - 1; !(u & 1); t++,u>>=1);//n-1 =u*2^t
        for(int i = 0; i < 10; i++){//10次试探
            ll a = rand() % (n - 1) + 1;//a∈[1,n)
            ll x = pow(a, u, n);
            for(int j = 0; j < t; j++){//二次试探
                ll y = mul(x, x, n);
                if(y == 1 && x != 1 && x != n - 1)
                    return 0;
                x = y;//相当于让幂重新变回p - 1
            }
            if(x != 1)return 0;
        }
        return 1;
    }
    bool isPrime(ll n){ // 判断大整数是否是素数
        return miller_rabin(n);
    }
}
